// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

import (
	"github.com/apache/dubbo-go/protocol"
	dgrpc "github.com/apache/dubbo-go/protocol/grpc"
	"github.com/apache/dubbo-go/protocol/invocation"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 注册请求
type RegisterReq struct {
	// 账号
	Passport string `protobuf:"bytes,1,opt,name=Passport,proto3" json:"Passport,omitempty"`
	// 密码
	Password string `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	// 确认密码
	Password2 string `protobuf:"bytes,3,opt,name=Password2,proto3" json:"Password2,omitempty"`
	// 邮箱
	Email string `protobuf:"bytes,4,opt,name=Email,proto3" json:"Email,omitempty"`
	// 昵称
	Nickname             string   `protobuf:"bytes,5,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterReq) Reset()         { *m = RegisterReq{} }
func (m *RegisterReq) String() string { return proto.CompactTextString(m) }
func (*RegisterReq) ProtoMessage()    {}
func (*RegisterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{0}
}

func (m *RegisterReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterReq.Unmarshal(m, b)
}
func (m *RegisterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterReq.Marshal(b, m, deterministic)
}
func (m *RegisterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterReq.Merge(m, src)
}
func (m *RegisterReq) XXX_Size() int {
	return xxx_messageInfo_RegisterReq.Size(m)
}
func (m *RegisterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterReq.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterReq proto.InternalMessageInfo

func (m *RegisterReq) GetPassport() string {
	if m != nil {
		return m.Passport
	}
	return ""
}

func (m *RegisterReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *RegisterReq) GetPassword2() string {
	if m != nil {
		return m.Password2
	}
	return ""
}

func (m *RegisterReq) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *RegisterReq) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

// 注册结果
type RegisterRes struct {
	UserDTO              *UserDTO `protobuf:"bytes,1,opt,name=UserDTO,proto3" json:"UserDTO,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterRes) Reset()         { *m = RegisterRes{} }
func (m *RegisterRes) String() string { return proto.CompactTextString(m) }
func (*RegisterRes) ProtoMessage()    {}
func (*RegisterRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{1}
}

func (m *RegisterRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterRes.Unmarshal(m, b)
}
func (m *RegisterRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterRes.Marshal(b, m, deterministic)
}
func (m *RegisterRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterRes.Merge(m, src)
}
func (m *RegisterRes) XXX_Size() int {
	return xxx_messageInfo_RegisterRes.Size(m)
}
func (m *RegisterRes) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterRes.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterRes proto.InternalMessageInfo

func (m *RegisterRes) GetUserDTO() *UserDTO {
	if m != nil {
		return m.UserDTO
	}
	return nil
}

func init() {
	proto.RegisterType((*RegisterReq)(nil), "pb.RegisterReq")
	proto.RegisterType((*RegisterRes)(nil), "pb.RegisterRes")
}

func init() { proto.RegisterFile("user.proto", fileDescriptor_116e343673f7ffaf) }

var fileDescriptor_116e343673f7ffaf = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x2d, 0x4e, 0x2d,
	0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0xe2, 0x03, 0xf1, 0xe3, 0x53,
	0x4a, 0xf2, 0x21, 0x62, 0x4a, 0x53, 0x19, 0xb9, 0xb8, 0x83, 0x52, 0xd3, 0x33, 0x8b, 0x4b, 0x52,
	0x8b, 0x82, 0x52, 0x0b, 0x85, 0xa4, 0xb8, 0x38, 0x02, 0x12, 0x8b, 0x8b, 0x0b, 0xf2, 0x8b, 0x4a,
	0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xe0, 0x7c, 0x98, 0x5c, 0x79, 0x7e, 0x51, 0x8a, 0x04,
	0x13, 0x42, 0x0e, 0xc4, 0x17, 0x92, 0xe1, 0xe2, 0x84, 0xb1, 0x8d, 0x24, 0x98, 0xc1, 0x92, 0x08,
	0x01, 0x21, 0x11, 0x2e, 0x56, 0xd7, 0xdc, 0xc4, 0xcc, 0x1c, 0x09, 0x16, 0xb0, 0x0c, 0x84, 0x03,
	0x32, 0xcf, 0x2f, 0x33, 0x39, 0x3b, 0x2f, 0x31, 0x37, 0x55, 0x82, 0x15, 0x62, 0x1e, 0x8c, 0xaf,
	0x64, 0x82, 0xec, 0xac, 0x62, 0x21, 0x55, 0x2e, 0xf6, 0xd0, 0xe2, 0xd4, 0x22, 0x97, 0x10, 0x7f,
	0xb0, 0xab, 0xb8, 0x8d, 0xb8, 0xf5, 0x0a, 0x92, 0xf4, 0xa0, 0x42, 0x41, 0x30, 0x39, 0x23, 0x5b,
	0x2e, 0x6e, 0x10, 0x33, 0x38, 0xb5, 0xa8, 0x2c, 0x33, 0x39, 0x55, 0x48, 0x8f, 0x8b, 0x03, 0x66,
	0x88, 0x10, 0x3f, 0x48, 0x03, 0x92, 0x4f, 0xa5, 0xd0, 0x04, 0x8a, 0x95, 0x18, 0x92, 0xd8, 0xc0,
	0x61, 0x62, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xad, 0xf2, 0x2b, 0xbe, 0x35, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	// 注册
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRes, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRes, error) {
	out := new(RegisterRes)
	err := c.cc.Invoke(ctx, "/pb.UserService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	// 注册
	Register(context.Context, *RegisterReq) (*RegisterRes, error)
}

// UnimplementedUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (*UnimplementedUserServiceServer) Register(ctx context.Context, req *RegisterReq) (*RegisterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _UserService_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

// UserServiceClientImpl is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClientImpl struct {
	// 注册
	Register func(ctx context.Context, in *RegisterReq, out *RegisterRes) error
}

func (c *UserServiceClientImpl) Reference() string {
	return "userServiceImpl"
}

func (c *UserServiceClientImpl) GetDubboStub(cc *grpc.ClientConn) UserServiceClient {
	return NewUserServiceClient(cc)
}

type UserServiceProviderBase struct {
	proxyImpl protocol.Invoker
}

func (s *UserServiceProviderBase) SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UserServiceProviderBase) GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func _DUBBO_UserService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dgrpc.DubboGrpcService)
	args := []interface{}{}
	args = append(args, in)
	invo := invocation.NewRPCInvocation("Register", args, nil)
	if interceptor == nil {
		result := base.GetProxyImpl().Invoke(context.Background(), invo)
		return result.Result(), result.Error()
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.GetProxyImpl().Invoke(context.Background(), invo)
		return result.Result(), result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func (s *UserServiceProviderBase) ServiceDesc() *grpc.ServiceDesc {
	return &grpc.ServiceDesc{
		ServiceName: "pb.UserService",
		HandlerType: (*UserServiceServer)(nil),
		Methods: []grpc.MethodDesc{
			{
				MethodName: "Register",
				Handler:    _DUBBO_UserService_Register_Handler,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "user.proto",
	}
}
